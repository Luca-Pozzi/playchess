<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <!-- ArUCo args [default values match setup at WE-COBOT (Feb. 2023)]-->
    <!-- Set the parameters for the detection of the Aruco marker on the clock -->
    <arg name="clock_markerId"      default="100"/>
    <arg name="clock_markerSize"    default="0.05"/>    <!-- in m -->
    <arg name="clock_markerName"    value="clock"/>

    <!-- Set the parameters for the detection of the Aruco marker on the box -->
    <arg name="box_markerId"        default="300"/>
    <arg name="box_markerSize"      default="0.05"/>    <!-- in m -->
    <arg name="box_markerName"      value="box"/>

    <!-- MoveIt scene args [default values match setup at WE-COBOT (Feb. 2023)] -->
    <!-- Set the clock size -->
    <arg name="clock_size"  default="(0.20, 0.11, 0.06)" />
    <!-- Set the box size -->
    <arg name="box_size"    default="(0.22, 0.15, 0.09)" />
    <!-- Set the safety wall size and position -->
    <arg name="wall_size"   default="(0.02, 1.2, 1.2)" />
    <arg name="wall_pos"    default="(1.2, 0.0, 0.6)" />    <!-- check these values -->

    <!-- Launch the two nodes detecting markers and publishing their poses -->
    <node pkg = "aruco_ros" type = "single"  name = "aruco_$(arg clock_markerName)">
        <remap from = "/camera_info"       to = "/xtion/rgb/camera_info" />
        <remap from = "/image"             to = "/xtion/rgb/image_rect_color" />
        <param name = "image_is_rectified" value = "True"/>
        <param name = "marker_size"        value = "$(arg clock_markerSize)"/>
        <param name = "marker_id"          value = "$(arg clock_markerId)"/>
        <param name = "reference_frame"    value = "/base_footprint"/>   <!-- frame in which the marker pose will be expressed -->
        <param name = "camera_frame"       value = "xtion_rgb_optical_frame"/>
        <param name = "marker_frame"       value = "$(arg cloc_markerName)_frame" />
        <param name = "corner_refinement"  value = "SUBPIX" />
    </node>

    <node pkg = "aruco_ros" type = "single"  name = "aruco_$(arg box_markerName)">
        <remap from = "/camera_info"       to = "/xtion/rgb/camera_info" />
        <remap from = "/image"             to = "/xtion/rgb/image_rect_color" />
        <param name = "image_is_rectified" value = "True"/>
        <param name = "marker_size"        value = "$(arg box_markerSize)"/>
        <param name = "marker_id"          value = "$(arg box_markerId)"/>
        <param name = "reference_frame"    value = "/base_footprint"/>   <!-- frame in which the marker pose will be expressed -->
        <param name = "camera_frame"       value = "xtion_rgb_optical_frame"/>
        <param name = "marker_frame"       value = "$(arg box_markerName)_frame" />
        <param name = "corner_refinement"  value = "SUBPIX" />
    </node>

    <!-- Launch the node that uses the detection outcome to populate the planning scene -->
    <node pkg = "playchess" type = "aruco_detection.py" name = "aruco_detection" output = "screen" >
        <!-- Clock size and ArUCo params (to detect position) -->
        <param name = "clock_marker_name"   value = "$(arg clock_markerName)" />
        <param name = "clock_size"          value = "$(arg clock_size)"/>
        <!-- Box size and ArUCo params (to detect position) -->
        <param name = "box_marker_name"     value = "$(arg box_markerName)" />
        <param name = "box_size"            value = "$(arg box_size)" />
        <!-- Wall size and position -->
        <param name = "wall_position"       value = "$(arg wall_pos)" />
        <param name = "wall_size"           value = "$(arg wall_size)" />
    </node> 

</launch>
